{"cells":[{"cell_type":"markdown","metadata":{"id":"fP0MNErrPlvS"},"source":["Make sure you remove `raise NotImplementedError()` and fill in any place that says `# YOUR CODE HERE`, as well as your `NAME`, `ID`, and `SECTION` below:"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"dxCjWtFxPlvX","executionInfo":{"status":"ok","timestamp":1745416559108,"user_tz":-360,"elapsed":16,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["NAME = \"MD.Sohanur Rahman Shimul\"\n","ID = \"22299079\"\n","SECTION = \"12\""]},{"cell_type":"markdown","metadata":{"id":"NQ8skUBePlvZ"},"source":["---"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"mUa8n1tfPlva","nbgrader":{"cell_type":"markdown","checksum":"9b7261b005274f20aab5b5157815cc4f","grade":false,"grade_id":"title","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["# Part 1: Hermite Interpolation\n","---\n","Hermite Interpolation is an example of a variant of the interpolation problem, where the interpolant matches one or more **derivatives of $f$**  at each of the nodes, in addition to the function values."]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"t6HuHqs8Plva","nbgrader":{"cell_type":"markdown","checksum":"2ac7b29da925009a6e6e93ce16cd1871","grade":false,"grade_id":"intro1","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["## Importing the necessary libraries"]},{"cell_type":"code","execution_count":2,"metadata":{"deletable":false,"editable":false,"id":"zaOqCWsePlvb","nbgrader":{"cell_type":"code","checksum":"b3ce57ac45d5516f69d56b4a7c02a1d6","grade":false,"grade_id":"import","locked":true,"schema_version":3,"solution":false,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559127,"user_tz":-360,"elapsed":15,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from itertools import combinations\n","from numpy.polynomial import Polynomial"]},{"cell_type":"code","source":["P=Polynomial([1,2,3,4])"],"metadata":{"id":"NeFqdK1_IUG9","executionInfo":{"status":"ok","timestamp":1745416559129,"user_tz":-360,"elapsed":4,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["print(P.deriv(1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ve6OSlPxMM2e","outputId":"33aa2ac4-0060-4f1f-d7eb-f2cbbe546c8b","executionInfo":{"status":"ok","timestamp":1745416559166,"user_tz":-360,"elapsed":40,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["2.0 + 6.0·x + 12.0·x²\n"]}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"wR9qR23NPlvb","nbgrader":{"cell_type":"markdown","checksum":"9368014a5a45cd31c846853230dae411","grade":false,"grade_id":"intro2","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["## Creating the components for Hermite interpolation\n","\n","For the case of Hermite Interpolation, we look for a polynomial that matches both $f'(x_i)$ and $f(x_i)$ at the nodes $x_i = x_0,\\dots,x_n$. Say you have $n+1$ data points, $(x_0, y_0), (x_1, y_1), x_2, y_2), \\dots, (x_n, y_n)$ and you happen to know the first-order derivative at all of these points, namely, $(x_0, y_0 ^\\prime ), (x_1, y_1 ^\\prime ), x_2, y_2 ^\\prime ), \\dots ,(x_n, y_n ^\\prime )$. According to hermite interpolation, since there are $2n + 2$ conditions; $n+1$ for $f(x_i)$ plus $n+1$ for $f'(x_i)$; you can fit a polynomial of order $2n+1$.\n","\n","General form of a $2n+1$ degree Hermite polynomial:\n","\n","$$p_{2n+1} = \\sum_{k=0}^{n} \\left(f(x_k)h_k(x) + f'(x_k)\\hat{h}_k(x)\\right), \\tag{1}$$\n","\n","where $h_k$ and $\\hat{h}_k$ are defined using Lagrange basis functions by the following equations:\n","\n","$$h_k(x) = (1-2(x-x_k)l^\\prime_k(x_k))l^2_k(x_k), \\tag{2}$$\n","\n","and\n","\n","$$\\hat{h}_k(x) = (x-x_k)l^2_k(x), \\tag{3}$$\n","\n","where the Lagrange basis function being:\n","\n","$$l_k(x) = \\prod_{j=0, j\\neq k}^{n} \\frac{x-x_j}{x_k-x_j}. \\tag{4}$$\n","\n","**Note** that, we can rewrite Equation $(2)$ in this way,\n","\n","\\begin{align}\n","h_k(x) &= \\left(1-2(x-x_k)l^\\prime_k(x_k) \\right)l^2_k(x) \\\\\n","&= \\left(1 - 2xl^\\prime_k(x_k) + 2x_kl^\\prime_k(x_k) \\right)l^2_k(x) \\\\\n","&= \\left(1 + 2x_kl^\\prime_k(x_k) - 2l'_k(x_k)x \\right) l^2_k(x) \\tag{5}\n","\\end{align}\n","Replacing $l^\\prime_k(x_k)$ with $m$, we get:\n","$$h_k(x) = (1 - 2xm + 2x_km)l^2_k(x). \\tag{6}$$\n","\n","## Task 1 - 2 Marks:\n","\n","* The functions: `l(k, x)`, `h(k, x)` and `h_hat(k, x)` calculate the corresponding $l_k$, $h_k$, and $\\hat{h}_k$, respectively.\n","\n","* Function `l(k, x)` has already been defined for you. Your task is to complete the `h(k, x)`, `h_hat(k, x)`, and `hermit(x, y, y_prime)` functions.\n","\n","* Later we will draw some plots to check if the code is working.\n","\n","---"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"PPIUqb63Plvc","nbgrader":{"cell_type":"markdown","checksum":"b73facf56ebe52af4d34ce6aed213204","grade":false,"grade_id":"part01_intro","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["### Part 1: Calculate $l_k$\n","This function uses the following equation to calculate $l_k(x)$ and returns a polynomial:\n","\n","$$l_k(x) = \\prod_{j=0, j\\neq k}^{n} \\frac{x-x_j}{x_k-x_j}.$$"]},{"cell_type":"code","execution_count":5,"metadata":{"deletable":false,"editable":false,"id":"hLF2Df6LPlvd","nbgrader":{"cell_type":"code","checksum":"193776fb462b953e4cc901203895dce4","grade":false,"grade_id":"l_ans","locked":true,"schema_version":3,"solution":false,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559183,"user_tz":-360,"elapsed":2,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["# Already written for you.\n","\n","def l(k, x):\n","    n = len(x)\n","    assert (k < len(x))\n","\n","    x_k = x[k]\n","    x_copy = np.delete(x, k)\n","\n","    denominator = np.prod(x_copy - x_k)\n","\n","    coeff = []\n","\n","    for i in range(n):\n","        coeff.append(sum([np.prod(x) for x in combinations(x_copy, i)]) * (-1)**(i) / denominator)\n","\n","    coeff.reverse()\n","\n","    return Polynomial(coeff)"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"WDJyus6iPlve","nbgrader":{"cell_type":"markdown","checksum":"2b2776844ce83abcacb6b0ba6028ccd0","grade":false,"grade_id":"part02_intro","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["### Part 2: Calculate $h_k$\n","This function calculates $h_k(x)$ using the following equation:\n","$$h_k(x) = \\left(1 + 2x_kl^\\prime_k(x_k) - 2l'_k(x_k)x \\right) l^2_k(x).$$\n","\n","This equation is basically a multiplication of two polynomials.\n","\n","First polynomial: $1 + 2x_kl^\\prime_k(x_k) - 2l'_k(x_k)x$.\n","\n","Second polynomial: $l^2_k(x)$.\n","\n","The `coeff` variable should contain a python list of coefficient values for the **first** polynomial of the equation. These coefficient values are used to create a polynomial `p`."]},{"cell_type":"code","execution_count":6,"metadata":{"deletable":false,"id":"QFOHvxn4Plve","nbgrader":{"cell_type":"code","checksum":"b40e0245554b77b7aeb6e6fada5c28f9","grade":false,"grade_id":"h_ans","locked":false,"schema_version":3,"solution":true,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559212,"user_tz":-360,"elapsed":27,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["def h(k, x):\n","    # initialize with None. Replace with appropriate values/function calls\n","    l_k = l(k ,x)\n","    l_k_sqr = l_k*l_k\n","    l_k_prime = l_k.deriv(1)\n","    coeff = [1 + 2*x[k]*l_k_prime(x[k]),-2*l_k_prime(x[k])]\n","    p = Polynomial(coeff)\n","    return p * l_k_sqr"]},{"cell_type":"code","execution_count":7,"metadata":{"deletable":false,"editable":false,"id":"GzGTUWJ1Plvf","nbgrader":{"cell_type":"code","checksum":"084dac03acc384f3952f1decde3eda17","grade":true,"grade_id":"h_test","locked":true,"points":1.5,"schema_version":3,"solution":false,"task":false},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1745416559215,"user_tz":-360,"elapsed":2,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["# Test case for the h(k, x) function\n","x = [3, 5, 7, 9]\n","k = 2\n","h_test = h(k, [3, 5, 7, 9])\n","h_result = Polynomial([-2.5, 0.5]) * (l(k, x) ** 2)\n","\n","assert Polynomial.has_samecoef(h_result, h_test)\n","assert h_result == h_test"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"M724n62yPlvf","nbgrader":{"cell_type":"markdown","checksum":"e95ffdba5dfcaf981dc8b884538cb7fa","grade":false,"grade_id":"part03_intro","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["### Part 3: Calculate $\\hat{h}_k$\n","This function calculates $\\hat{h}_k(x)$ using the following equation:\n","\n","$$\\hat{h}_k(x) = (x-x_k)l^2_k(x).$$\n","\n","This equation is also a multiplication of two polynomials.\n","\n","First polynomial: $x-x_k$.\n","\n","Second polynomial:  $l^2_k(x)$.\n","\n","The `coeff` variable should contain a python list of coefficient values for the **first** polynomial of the equation. These coefficient values are used to create a polynomial `p`."]},{"cell_type":"code","execution_count":8,"metadata":{"deletable":false,"id":"R0VeC9AIPlvf","nbgrader":{"cell_type":"code","checksum":"526567f27fdc6b0c693944715388aeb3","grade":false,"grade_id":"h_hat_ans","locked":false,"schema_version":3,"solution":true,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559277,"user_tz":-360,"elapsed":61,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["def h_hat(k, x):\n","    # Initialize with none\n","    l_k = l(k,x)\n","    l_k_sqr = l_k*l_k\n","    p = Polynomial([-x[k],1])\n","    return p * l_k_sqr"]},{"cell_type":"code","execution_count":9,"metadata":{"deletable":false,"editable":false,"id":"URbFerVBPlvg","nbgrader":{"cell_type":"code","checksum":"dab48dc3e3425ad92aac1fdc643320cd","grade":true,"grade_id":"h_hat_test","locked":true,"points":1.5,"schema_version":3,"solution":false,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559293,"user_tz":-360,"elapsed":14,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["x = [3, 5, 7, 9]\n","k = 2\n","h_test = h_hat(k, [3, 5, 7, 9])\n","h_result = Polynomial([-7, 1]) * (l(k, x) ** 2)\n","\n","assert Polynomial.has_samecoef(h_result, h_test)\n","assert h_result == h_test"]},{"cell_type":"code","source":["x = [3, 5, 7, 9]\n","k = 2\n","h_test = h_hat(k, [3, 5, 7, 9])\n","h_result = Polynomial([-7, 1]) * (l(k, x) ** 2)\n","print(h_result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tx994-QI7zpT","executionInfo":{"status":"ok","timestamp":1745416586706,"user_tz":-360,"elapsed":14,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"aa76e059-7c5f-46b4-bc16-899f5395818d"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["-498.33984375 + 713.49609375·x - 424.23046875·x² + 135.76171875·x³ -\n","25.26953125·x⁴ + 2.73828125·x⁵ - 0.16015625·x⁶ + 0.00390625·x⁷\n"]}]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"yJzRxYHuPlvg","nbgrader":{"cell_type":"markdown","checksum":"cd0d1d10b688aec869dfd36a17eda759","grade":false,"grade_id":"part04_intro","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["### Part 4: The Hermite Polynomial\n","This function uses the following equation:\n","\n","$$p_{2n+1} = \\sum_{k=0}^{n} \\left(f(x_k)h_k(x) + f'(x_k)\\hat{h}_k(x)\\right).$$\n","\n","The polynomial denoted by the equation is calculated by the variable `f`."]},{"cell_type":"code","execution_count":10,"metadata":{"deletable":false,"id":"CVWuSAIqPlvg","nbgrader":{"cell_type":"code","checksum":"238ae82cc84e0f1db6ee42946346ae4a","grade":false,"grade_id":"part04_ans","locked":false,"schema_version":3,"solution":true,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559314,"user_tz":-360,"elapsed":16,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["def hermit(x, y, y_prime):\n","    assert len(x) == len(y)\n","    assert len(y) == len(y_prime)\n","\n","    f = 0\n","    # --------------------------------------------\n","    for k in range(len(x)):\n","      f+= y[k]*h(k,x)+ y_prime[k]*h_hat(k,x)\n","    # --------------------------------------------\n","    return f"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"BZyouHLCPlvg","nbgrader":{"cell_type":"markdown","checksum":"be144e5dff21332b4b93a63e59a035c2","grade":false,"grade_id":"plot_intro","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["## Testing our methods by plotting graphs.\n","\n","**Note:**\n","\n","* For each of the 5 plots, there will be 2 curves plotted: one being the original function, and the other being the interpolated curve.\n","\n","* The original functions are displayed in orange color, while the hermite interpolated curves are in blue.\n","\n","* `x`, `y`, and `y_prime` contain $x_i$, $f(x_i)$, and $f'(x_i)$ of the given nodes of the original function $f$.\n","\n","Upon calling the `hermit()` function, it returns a polynomial `f`. For example, for plot 1, it is called `f3`.\n","\n","In general, a polynomial may look like the following: $f = 1 + 2x + 3x^2$. Next, we pass in a number of $x$ values to the polynomial by calling the `.linspace()` function on the polynomial object using `f.linspace()`. This function outputs a tuple, which is stored in a variable called `data`. First element of `data` contains a 1D numpy array of $x_i$ values generated by `linspace()`, and the second element of `data` contains a 1D numpy array of the corresponding $y_i$ values outputted by our example polynomial:\n","$f = 1 + 2x + 3x^2$.\n","\n","Using `test_x`, we generate a range of $x_i$ values to plot the original function, and `test_y` contains the corresponding $y_i$ values of the original function. For the first plot, our original function is the *sine curve*.\n","\n","For all the plots:\n","\n","`plt.plot(test_x, test_y)` plots the original function.\n","\n","`plt.plot(data[0], data[1])` plots the interpolated polynomial."]},{"cell_type":"code","execution_count":11,"metadata":{"deletable":false,"editable":false,"id":"I0AAKqRiPlvh","nbgrader":{"cell_type":"code","checksum":"9e619e399993ba9b52b9a5acfc6d952a","grade":false,"grade_id":"samples","locked":true,"schema_version":3,"solution":false,"task":false},"executionInfo":{"status":"ok","timestamp":1745416559347,"user_tz":-360,"elapsed":31,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["pi      = np.pi\n","x       = np.array([0.0, pi/8.0,  pi, 4.0*pi/2.0])\n","y       = np.array([0.0,    1.0, 0.0,       -1.0])\n","y_prime = np.array([1.0,    0.0, 1.0,        0.0])"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"CE1RRR6pPlvh","nbgrader":{"cell_type":"markdown","checksum":"62a455aacd036963d695b540c90f7cd0","grade":false,"grade_id":"plot01","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["**Plot 1:** trying to interpolate a sine curve (`np.sin()`) using first 2 nodes in `x` and `y`, and their corresponding derivative in `y_prime`."]},{"cell_type":"code","execution_count":12,"metadata":{"deletable":false,"editable":false,"id":"QQPpgFHEPlvh","nbgrader":{"cell_type":"code","checksum":"6d5bb5d8680003a78893653e98f6a087","grade":true,"grade_id":"plot01_test","locked":true,"points":1,"schema_version":3,"solution":false,"task":false},"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1745416559807,"user_tz":-360,"elapsed":458,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"e1a530fe-11d0-4df0-f015-915635ef3516"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["n      = 1\n","f3     = hermit(x[:(n+1)], y[:(n+1)], y_prime[:(n+1)])\n","data   = f3.linspace(n=50, domain=[-3, 3])\n","test_x = np.linspace(-10, 10, 50, endpoint=True)\n","test_y = np.sin(test_x)\n","\n","plt.plot(data[0], data[1])\n","plt.plot(test_x, test_y)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"W7v9mEcLPlvh","nbgrader":{"cell_type":"markdown","checksum":"d8f7bf96ae4f35419f880d25e72cff09","grade":false,"grade_id":"plot02","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["**Plot 2:** trying to interpolate a sine curve (`np.sin()`) using first 3 nodes in `x` and `y` and their corresponding derivative in `y_prime`."]},{"cell_type":"code","execution_count":13,"metadata":{"deletable":false,"editable":false,"id":"qnNNOyC5Plvh","nbgrader":{"cell_type":"code","checksum":"25f490548e99af7d5fccb9fd5c653e80","grade":true,"grade_id":"plot02_ans","locked":true,"points":1,"schema_version":3,"solution":false,"task":false},"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1745416560010,"user_tz":-360,"elapsed":202,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"1331ea80-28c0-4baa-eba9-da053df8d0d1"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["n      = 2\n","f5     = hermit(x[:(n+1)], y[:(n+1)], y_prime[:(n+1)])\n","data   = f5.linspace(n=100, domain=[-0.85, 2.5])\n","test_x = np.linspace(-5*pi, 5*pi, 100, endpoint=True)\n","test_y = np.sin(test_x)\n","\n","plt.plot(test_x, test_y) # 25-\n","plt.plot(data[0], data[1]) # 10-33\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"InK1vx-bPlvi","nbgrader":{"cell_type":"markdown","checksum":"aae683a514e99dfecaa8672e1d6a4cb3","grade":false,"grade_id":"plot03","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["**Plot 3:** trying to interpolate a sine curve (`np.sin()`) using first 4 nodes in `x` and `y` and their corresponding derivative in `y_prime`."]},{"cell_type":"code","execution_count":14,"metadata":{"deletable":false,"editable":false,"id":"eondZ70xPlvi","nbgrader":{"cell_type":"code","checksum":"29fc16454184db75748c0381eff20504","grade":true,"grade_id":"plot03_ans","locked":true,"points":1,"schema_version":3,"solution":false,"task":false},"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1745416560188,"user_tz":-360,"elapsed":177,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"24255b0c-b47b-4489-db3d-f6a693b3fdd7"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["n      = 3\n","f7     = hermit(x[:(n+1)], y[:(n+1)], y_prime[:(n+1)])\n","data   = f7.linspace(n=50, domain=[-0.45, 3.3])\n","test_x = np.linspace(-6*pi, 6*pi, 50, endpoint=True)\n","test_y = np.sin(test_x)\n","\n","plt.plot(data[0], data[1])\n","plt.plot(test_x, test_y)\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"qR1mUG58Plvi","nbgrader":{"cell_type":"markdown","checksum":"d8edc2554aa6f2946081a47711e0f556","grade":false,"grade_id":"plot04","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["**Plot 4:** trying to interpolate an exponential curve (`np.exp()`) using all nodes in `x` and `y` and their corresponding derivatives in `y_prime`."]},{"cell_type":"code","execution_count":15,"metadata":{"deletable":false,"editable":false,"id":"tMgsKsC9Plvi","nbgrader":{"cell_type":"code","checksum":"4978eef584205c7563997760c20241c6","grade":true,"grade_id":"plot04_test","locked":true,"points":1,"schema_version":3,"solution":false,"task":false},"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1745416560360,"user_tz":-360,"elapsed":171,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"9f840a4e-87e8-4bab-cef0-91ce27adb5cd"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#defining new set of given node information: x, y and y'\n","x       = np.array([0.0, 1.0,          2.0       ])\n","y       = np.array([1.0, 2.71828183,  54.59815003])\n","y_prime = np.array([0.0, 5.43656366, 218.39260013])\n","\n","\n","f7      = hermit( x, y, y_prime)\n","data    = f7.linspace(n=50, domain=[-0.7, 2.45])\n","test_x  = np.linspace(-0.5, 2.2, 50, endpoint=True)\n","test_y  = np.exp(test_x**2)\n","\n","plt.plot(data[0], data[1])\n","plt.plot(test_x, test_y)\n","plt.show()\n","\n"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"DYVL-_XcPlvi","nbgrader":{"cell_type":"markdown","checksum":"5419db887410ebe73b42fa5f21ffc50e","grade":false,"grade_id":"plot05","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["**Plot 5:** trying to interpolate $y = (x-3)^2 + 1$ using all nodes in `x` and `y` and their corresponding derivatives in `y_prime`.\n","\n","For this plot you might be able to see only one curve due to the two curves overlapping. This means that our polynomial is accurately interpolating the original function.\n"]},{"cell_type":"code","execution_count":16,"metadata":{"deletable":false,"editable":false,"id":"tuHX_czoPlvj","nbgrader":{"cell_type":"code","checksum":"92cc6293f29ebf42544cedf49e4c1fc5","grade":true,"grade_id":"plot05_test","locked":true,"points":3,"schema_version":3,"solution":false,"task":false},"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1745416560555,"user_tz":-360,"elapsed":194,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"c6f2003a-f1d0-4b2c-f73d-76365991a107"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#defining new set of given node information: x, y and y'\n","x       = np.array([1.0, 3.0, 5.0])\n","y       = np.array([5.0, 1.0, 5.0])\n","y_prime = np.array([-4.0, 0.0, 4.0])\n","\n","f7      = hermit( x, y, y_prime)\n","data    = f7.linspace(n=50, domain=[-11, 10.5])\n","test_x  = np.linspace(-10, 10, 50, endpoint=True)\n","test_y  = (test_x-3)**2 + 1\n","\n","plt.plot(data[0], data[1])\n","plt.plot(test_x, test_y)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"UgP_TWwOPlvj","nbgrader":{"cell_type":"markdown","checksum":"c07a0720672d1b686830ce5cef78046c","grade":false,"grade_id":"cell-580b64f506c61583","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["## Part 2: Polynomial Interpolation Using Newton's Divided Difference Form\n","---\n"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"AgAbn67kPlvj","nbgrader":{"cell_type":"markdown","checksum":"030540dd5ee10acfca978c35d1e76cb8","grade":false,"grade_id":"cell-95fa6d3532e84eff","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["### Newton's Divided Difference Form\n","\n","Newton form of a $n$ degree polynomial:\n","\n","$$p_n(x) = \\sum_{k=0}^{n} a_kn_k(x),$$\n","where the basis is:\n","$$n_k(x) = \\prod_{j=0}^{k-1}(x-x_j),$$\n","$$ n_0(x)=1,$$\n","\n","and the coefficients are: $$a_k = f[x_0, x_1, ..., x_k],$$\n","\n","where the notation $f[x_0, x_1,\\dots,x_k]$ denotes the divided difference.\n","\n","By expanding the Newton form, we get:\n","\n","$$p(x) = f [x_0] + (x-x_0) f[x_0,x_1] + (x-x_0) (x-x_1) f[x_0,x_1,x_2] + \\dots + (x-x_0) (x-x_1) \\dots (x-x_{k-1}) f[x_0, x_1, \\dots, x_k]$$\n","\n","\n","## Task 2 - 2 Marks:\n","1. Complete the `calc_div_diff(x,y)` function which takes input `x` and `y`, and calculates all the divided differences. You may use the lambda function `difference()` inside the `calc_div_diff(x,y)` function to calculate the divided differences.\n","\n","2. Complete the `__call__()` function which takes an input `x`, and calculates `y` using all the difference coefficients. `x` can be a single value or a numpy. In this case, it is a numpy array.\n","\n","`res` variable must contain all results (corresponding y for x)."]},{"cell_type":"code","execution_count":17,"metadata":{"deletable":false,"id":"iLUOVj3APlvj","nbgrader":{"cell_type":"code","checksum":"50cdde63e49e009a199201f86744564a","grade":false,"grade_id":"cell-9e446c528b62c87f","locked":false,"schema_version":3,"solution":true,"task":false},"executionInfo":{"status":"ok","timestamp":1745416560574,"user_tz":-360,"elapsed":17,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["class Newtons_Divided_Differences:\n","\n","    def __init__(self, differences):\n","        self.differences = differences\n","\n","    def __call__(self, x):\n","\n","        res = np.zeros(len(x))\n","        for i in range(len(self.differences)):\n","          sum =1\n","\n","          for j in range(i):\n","            sum *= x-data_x[j]\n","          res+= self.differences[i]*sum\n","        return res"]},{"cell_type":"code","execution_count":18,"metadata":{"deletable":false,"id":"HZhqt-6JPlvj","nbgrader":{"cell_type":"code","checksum":"abd6bbf6334a986a608c38206f702989","grade":false,"grade_id":"cell-fbe4c16afb6b3b32","locked":false,"schema_version":3,"solution":true,"task":false},"executionInfo":{"status":"ok","timestamp":1745416560579,"user_tz":-360,"elapsed":2,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["# basic rule for calculating the difference, implanted in the lambda function.\n","# You may use it if you wish\n","difference = lambda y2, y1, x2, x1: (y2-y1)/(x2-x1)\n","\n","def calc_div_diff(x,y):\n","    assert(len(x)==len(y))\n","    #write this function to calculate all the divided differences in the list 'b'\n","    b = []  #initializing\n","    #----------------------------------------------\n","    k = np.zeros((len(x), len(x)))\n","\n","\n","    k[:,0] = y\n","\n","    for col in range(1,len(x)):\n","      for row in range(len(x)-col):\n","          k[row][col] = difference(k[row+1][col-1],k[row][col-1], x[row+col],x[row])\n","\n","    b=k[0,:]\n","\n","    #----------------------------------------------\n","    return b"]},{"cell_type":"code","execution_count":19,"metadata":{"deletable":false,"editable":false,"id":"FancUC_xPlvk","nbgrader":{"cell_type":"code","checksum":"a23dd58fcab86885a166b1e138b9ea08","grade":true,"grade_id":"cell-72b9329c6c32517e","locked":true,"points":5,"schema_version":3,"solution":false,"task":false},"executionInfo":{"status":"ok","timestamp":1745416560620,"user_tz":-360,"elapsed":40,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}}},"outputs":[],"source":["data_x = [-3.,-2.,-1.,0.,1.,3.,4.]\n","data_y = [-60.,-80.,6.,1.,45.,30.,16.]\n","\n","test = calc_div_diff(data_x, data_y)\n","\n","assert len(test) == len(data_x)"]},{"cell_type":"markdown","metadata":{"deletable":false,"editable":false,"id":"affgKuuNPlvk","nbgrader":{"cell_type":"markdown","checksum":"e2b6e9e71eaf31b857393044c2768ac0","grade":false,"grade_id":"cell-f6a9f264b02b2642","locked":true,"schema_version":3,"solution":false,"task":false}},"source":["### Plotting the polynomial\n","* `data_x` and `data_y` are the coordinates of the given nodes.\n","\n","* `differences` is a list which contains the divided differences as each of its elements: $f[x_0], f[x_0,x_1], f[x_0,x_1,x_2], \\dots$\n","\n","* `obj` is an object of type `Newtons_Divided_Differences`. Creating the object runs the constructor of the class where the `difference` are stored in `self.differences`.\n","\n","* `X` contains $x_i$ values through which we want to plot our polynomial.\n","\n","* Calling the object using `obj(X)` executes the `__call__()` function of the class, which returns a numpy array containing the corresponding $y_i$ values, and storing them in variable `F`.\n","\n","* Using `plt.plot(X,F)`, we plot the $(x_i, y_i)$ pairs of the polynomial."]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","data_x = np.array([-5.,-1,-0.5,0.5,3.5,7.,9])\n","data_y = np.array([-30., -50., 36., 31., 75., 60., 46.])\n","differences = calc_div_diff(list(data_x), list(data_y))\n","test_x = np.linspace(-7, 10, 50, endpoint=True)\n","\n","p = Newtons_Divided_Differences(list(differences))\n","\n","test_y = p(test_x)\n","\n","plt.plot(test_x, test_y)\n","plt.plot(data_x, data_y, 'ro')\n","plt.show()"],"metadata":{"id":"X9lS66ATFFgM","colab":{"base_uri":"https://localhost:8080/","height":432},"executionInfo":{"status":"ok","timestamp":1745416560914,"user_tz":-360,"elapsed":292,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"00bb4f34-7f5e-4774-aa33-af1bf17e9e37"},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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d56Sk5OVlZWlqVOnatu2bSe8zcKFC4/73cfHx4eo4uB56KGHjnteI0aMOOFtou31ILX/vmiz2XT33Xe32z5aXg8rVqzQVVddpdzcXNlsNr3yyittthtj9POf/1x9+/ZVQkKCJk2apO3bt5/0frv6HtNVhJwvmDhxovbv39/m8u1vf1uDBg3Sueeee8Lb3n777W1u9+ijj4ao6uB5+OGH2zyn733veyds/4Mf/ECvvfaaFi1apOXLl2vfvn265pprQlRt99u6dat8Pp/+8Ic/aNOmTXriiSc0f/58/eQnPznpbSP99fDCCy9o5syZevDBB/Xxxx9r3LhxKioqUmVlZbvtV65cqWnTpmn69Olau3atpk6dqqlTp2rjxo0hrrz7LF++XHfffbdWrVqlxYsXq7m5WZMnT1ZdXd0Jb5eSktLmd7979+4QVRxco0ePbvO83n///Q7bRuPrQZI++uijNvtg8eLFkqSvf/3rHd4mGl4PdXV1GjdunObNm9fu9kcffVS/+93vNH/+fK1evVq9evVSUVGRGhsbO7zPrr7HnBKDE/J4PCYzM9M8/PDDJ2z35S9/2dxzzz2hKSpEBgwYYJ544olOt6+urjZxcXFm0aJFgeu2bNliJJni4uIgVGiNRx991AwaNOiEbaLh9TBhwgRz9913B372er0mNzfXzJ49u932119/vbniiivaXFdQUGC+853vBLXOUKqsrDSSzPLlyztss2DBApOamhq6okLkwQcfNOPGjet0+57wejDGmHvuuccMGTLE+Hy+drdH4+tBknn55ZcDP/t8PpOTk2PmzJkTuK66uto4nU7z3HPPdXg/XX2PORX05JzEv/71Lx08eFC33XbbSdv+/e9/V0ZGhs4880zNmjVL9fX1IagwuB555BH16dNHZ599tubMmaOWlpYO25aUlKi5uVmTJk0KXDdixAj1799fxcXFoSg3JFwul3r37n3SdpH8evB4PCopKWnzu7Tb7Zo0aVKHv8vi4uI27SWpqKgo6n73kk76+6+trdWAAQOUn5+vq6++Wps2bQpFeUG3fft25ebmavDgwbrxxhtVWlraYdue8HrweDz629/+pm9961uy2WwdtovW14Pfzp07VV5e3ub3nZqaqoKCgg5/36fyHnMqevRZyDvj6aefVlFR0UnPVv7Nb35TAwYMUG5urtavX6/7779f27Zt00svvRSiSrvf97//fZ1zzjnq3bu3Vq5cqVmzZmn//v36zW9+02778vJyORwOpaWltbk+Oztb5eXlIag4+Hbs2KG5c+fqscceO2G7SH89VFVVyev1Kjs7u8312dnZ2rp1a7u3KS8vb7d9tPzufT6f7r33Xl1wwQU688wzO2w3fPhwPfPMMxo7dqxcLpcee+wxTZw4UZs2bTrp+0g4Kygo0MKFCzV8+HDt379fv/jFL3ThhRdq48aNSk5OPq59tL8eJOmVV15RdXW1br311g7bROvr4Vj+32lXft+n8h5zSrqtTyjM3X///UbSCS9btmxpc5uysjJjt9vNP/7xjy4/3pIlS4wks2PHju56Ct3iVPaD39NPP21iY2NNY2Nju9v//ve/G4fDcdz15513nvnxj3/crc/jdJ3KftizZ48ZMmSImT59epcfL1xfDx3Zu3evkWRWrlzZ5vr77rvPTJgwod3bxMXFmWeffbbNdfPmzTNZWVlBqzOU7rzzTjNgwABTVlbWpdt5PB4zZMgQ89Of/jRIlVnj8OHDJiUlxfzpT39qd3u0vx6MMWby5Mnmyiuv7NJtouH1oC8crvrggw+MJLNv37427b7+9a+b66+/vt37OJX3mFPRY3pyfvjDH54wbUvS4MGD2/y8YMEC9enTR1/96le7/HgFBQWSWv/zHzJkSJdvHyynsh/8CgoK1NLSol27dmn48OHHbc/JyZHH41F1dXWb3pyKigrl5OScTtndrqv7Yd++fbr44os1ceJE/fGPf+zy44Xr66EjGRkZiomJOW5m3Il+lzk5OV1qH0lmzJih119/XStWrOjyf99xcXE6++yztWPHjiBVZ420tDQNGzasw+cVza8HSdq9e7fefffdLvfORuPrwf87raioUN++fQPXV1RU6Kyzzmr3NqfyHnMqekzIyczMVGZmZqfbG2O0YMEC3XzzzYqLi+vy461bt06S2vzCw0FX98Ox1q1bJ7vdrqysrHa3jx8/XnFxcVqyZImuvfZaSdK2bdtUWlqqwsLCU645GLqyH/bu3auLL75Y48eP14IFC2S3d30oW7i+HjricDg0fvx4LVmyRFOnTpXUerhmyZIlmjFjRru3KSws1JIlS3TvvfcGrlu8eHHY/e67whij733ve3r55Ze1bNkyDRo0qMv34fV6tWHDBl1++eVBqNA6tbW1+uyzz3TTTTe1uz0aXw/HWrBggbKysnTFFVd06XbR+HoYNGiQcnJytGTJkkCocbvdWr16te666652b3Mq7zGnpNv6hKLMu+++2+Ghmz179pjhw4eb1atXG2OM2bFjh3n44YfNmjVrzM6dO82rr75qBg8ebC666KJQl91tVq5caZ544gmzbt0689lnn5m//e1vJjMz09x8882BNl/cD8a0dun379/fvPfee2bNmjWmsLDQFBYWWvEUusWePXvM0KFDzaWXXmr27Nlj9u/fH7gc2yYaXw/PP/+8cTqdZuHChWbz5s3mjjvuMGlpaaa8vNwYY8xNN91kHnjggUD7Dz74wMTGxprHHnvMbNmyxTz44IMmLi7ObNiwwaqncNruuusuk5qaapYtW9bmd19fXx9o88X98Itf/MK888475rPPPjMlJSXmhhtuMPHx8WbTpk1WPIVu88Mf/tAsW7bM7Ny503zwwQdm0qRJJiMjw1RWVhpjesbrwc/r9Zr+/fub+++//7ht0fp6qKmpMWvXrjVr1641ksxvfvMbs3btWrN7925jjDGPPPKISUtLM6+++qpZv369ufrqq82gQYNMQ0ND4D4uueQSM3fu3MDPJ3uP6Q6EnA5MmzbNTJw4sd1tO3fuNJLM0qVLjTHGlJaWmosuusj07t3bOJ1OM3ToUHPfffcZl8sVwoq7V0lJiSkoKDCpqakmPj7ejBw50vzP//xPm/E4X9wPxhjT0NBgvvvd75r09HSTmJhovva1r7UJBJFmwYIFHY7Z8Yvm18PcuXNN//79jcPhMBMmTDCrVq0KbPvyl79sbrnlljbtX3zxRTNs2DDjcDjM6NGjzRtvvBHiirtXR7/7BQsWBNp8cT/ce++9gX2WnZ1tLr/8cvPxxx+Hvvhu9o1vfMP07dvXOBwO069fP/ONb3yjzRiznvB68HvnnXeMJLNt27bjtkXr62Hp0qXt/i34n6vP5zM/+9nPTHZ2tnE6nebSSy89bv8MGDDAPPjgg22uO9F7THewGWNM9/ULAQAAhAfWyQEAAFGJkAMAAKISIQcAAEQlQg4AAIhKhBwAABCVCDkAACAqEXIAAEBUIuQAAICoRMgBAABRiZADAACiEiEHAABEpf8fUpr2fqMtWz8AAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Daily Evaluation - 4 marks"],"metadata":{"id":"8gHrOpCcjl_r"}},{"cell_type":"code","source":["data_x = np.array([-1.67,0.5,1.5])\n","data_y = np.array([3.75, 1.22, 2.9,])\n","\n","\n","differences = calc_div_diff(list(data_x), list(data_y))\n","test_x = np.linspace(-2, 2, 50, endpoint=True)\n","\n","p = Newtons_Divided_Differences(list(differences))\n","\n","test_y =  p([0.75])\n","\n","print(test_y[0])\n"],"metadata":{"id":"M0Xocn8ojmVb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745417498921,"user_tz":-360,"elapsed":6,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"7e429ec4-953c-4378-8865-c42c8f9af006"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["1.4716700344531826\n"]}]},{"cell_type":"code","source":["import math\n","\n","data_x = np.array([-(math.pi)/4 , 0, math.pi/2])\n","data_y = np.array([math.cos(-(math.pi)/4), math.cos(0), math.cos(math.pi/2)])\n","\n","differences = calc_div_diff(list(data_x), list(data_y))\n","test_x = np.linspace(-1, 5, 100, endpoint=True)\n","\n","p = Newtons_Divided_Differences(list(differences))\n","\n","output_y = p([math.pi/6])\n","\n","print(\"Ans a\")\n","print(output_y[0])\n","\n","print(\"Ans b\")\n","print(f\"{abs(math.cos(math.pi/6) - output_y[0])}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wm-gWAC3PjOj","executionInfo":{"status":"ok","timestamp":1745417954903,"user_tz":-360,"elapsed":24,"user":{"displayName":"Sohanur Rahman","userId":"01573914553620547921"}},"outputId":"77705fa2-35ba-450c-afb3-a26253e5a644"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Ans a\n","0.9015979907595413\n","Ans b\n","0.03557258697510257\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1L-4p0lrzNp08zWlAi9V_9IYYejpZCczp","timestamp":1745334264295}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.1"}},"nbformat":4,"nbformat_minor":0}